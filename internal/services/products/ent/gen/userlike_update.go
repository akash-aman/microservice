// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"products/ent/gen/post"
	"products/ent/gen/predicate"
	"products/ent/gen/user"
	"products/ent/gen/userlike"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserLikeUpdate is the builder for updating UserLike entities.
type UserLikeUpdate struct {
	config
	hooks    []Hook
	mutation *UserLikeMutation
}

// Where appends a list predicates to the UserLikeUpdate builder.
func (ulu *UserLikeUpdate) Where(ps ...predicate.UserLike) *UserLikeUpdate {
	ulu.mutation.Where(ps...)
	return ulu
}

// SetUserID sets the "user_id" field.
func (ulu *UserLikeUpdate) SetUserID(i int) *UserLikeUpdate {
	ulu.mutation.SetUserID(i)
	return ulu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ulu *UserLikeUpdate) SetNillableUserID(i *int) *UserLikeUpdate {
	if i != nil {
		ulu.SetUserID(*i)
	}
	return ulu
}

// SetPostID sets the "post_id" field.
func (ulu *UserLikeUpdate) SetPostID(i int) *UserLikeUpdate {
	ulu.mutation.SetPostID(i)
	return ulu
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (ulu *UserLikeUpdate) SetNillablePostID(i *int) *UserLikeUpdate {
	if i != nil {
		ulu.SetPostID(*i)
	}
	return ulu
}

// SetUser sets the "user" edge to the User entity.
func (ulu *UserLikeUpdate) SetUser(u *User) *UserLikeUpdate {
	return ulu.SetUserID(u.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (ulu *UserLikeUpdate) SetPost(p *Post) *UserLikeUpdate {
	return ulu.SetPostID(p.ID)
}

// Mutation returns the UserLikeMutation object of the builder.
func (ulu *UserLikeUpdate) Mutation() *UserLikeMutation {
	return ulu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ulu *UserLikeUpdate) ClearUser() *UserLikeUpdate {
	ulu.mutation.ClearUser()
	return ulu
}

// ClearPost clears the "post" edge to the Post entity.
func (ulu *UserLikeUpdate) ClearPost() *UserLikeUpdate {
	ulu.mutation.ClearPost()
	return ulu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ulu *UserLikeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ulu.sqlSave, ulu.mutation, ulu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ulu *UserLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := ulu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ulu *UserLikeUpdate) Exec(ctx context.Context) error {
	_, err := ulu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulu *UserLikeUpdate) ExecX(ctx context.Context) {
	if err := ulu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ulu *UserLikeUpdate) check() error {
	if v, ok := ulu.mutation.UserID(); ok {
		if err := userlike.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`gen: validator failed for field "UserLike.user_id": %w`, err)}
		}
	}
	if v, ok := ulu.mutation.PostID(); ok {
		if err := userlike.PostIDValidator(v); err != nil {
			return &ValidationError{Name: "post_id", err: fmt.Errorf(`gen: validator failed for field "UserLike.post_id": %w`, err)}
		}
	}
	if ulu.mutation.UserCleared() && len(ulu.mutation.UserIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "UserLike.user"`)
	}
	if ulu.mutation.PostCleared() && len(ulu.mutation.PostIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "UserLike.post"`)
	}
	return nil
}

func (ulu *UserLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ulu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userlike.Table, userlike.Columns, sqlgraph.NewFieldSpec(userlike.FieldID, field.TypeInt))
	if ps := ulu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ulu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlike.UserTable,
			Columns: []string{userlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlike.UserTable,
			Columns: []string{userlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ulu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlike.PostTable,
			Columns: []string{userlike.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlike.PostTable,
			Columns: []string{userlike.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ulu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ulu.mutation.done = true
	return n, nil
}

// UserLikeUpdateOne is the builder for updating a single UserLike entity.
type UserLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserLikeMutation
}

// SetUserID sets the "user_id" field.
func (uluo *UserLikeUpdateOne) SetUserID(i int) *UserLikeUpdateOne {
	uluo.mutation.SetUserID(i)
	return uluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uluo *UserLikeUpdateOne) SetNillableUserID(i *int) *UserLikeUpdateOne {
	if i != nil {
		uluo.SetUserID(*i)
	}
	return uluo
}

// SetPostID sets the "post_id" field.
func (uluo *UserLikeUpdateOne) SetPostID(i int) *UserLikeUpdateOne {
	uluo.mutation.SetPostID(i)
	return uluo
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (uluo *UserLikeUpdateOne) SetNillablePostID(i *int) *UserLikeUpdateOne {
	if i != nil {
		uluo.SetPostID(*i)
	}
	return uluo
}

// SetUser sets the "user" edge to the User entity.
func (uluo *UserLikeUpdateOne) SetUser(u *User) *UserLikeUpdateOne {
	return uluo.SetUserID(u.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (uluo *UserLikeUpdateOne) SetPost(p *Post) *UserLikeUpdateOne {
	return uluo.SetPostID(p.ID)
}

// Mutation returns the UserLikeMutation object of the builder.
func (uluo *UserLikeUpdateOne) Mutation() *UserLikeMutation {
	return uluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uluo *UserLikeUpdateOne) ClearUser() *UserLikeUpdateOne {
	uluo.mutation.ClearUser()
	return uluo
}

// ClearPost clears the "post" edge to the Post entity.
func (uluo *UserLikeUpdateOne) ClearPost() *UserLikeUpdateOne {
	uluo.mutation.ClearPost()
	return uluo
}

// Where appends a list predicates to the UserLikeUpdate builder.
func (uluo *UserLikeUpdateOne) Where(ps ...predicate.UserLike) *UserLikeUpdateOne {
	uluo.mutation.Where(ps...)
	return uluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uluo *UserLikeUpdateOne) Select(field string, fields ...string) *UserLikeUpdateOne {
	uluo.fields = append([]string{field}, fields...)
	return uluo
}

// Save executes the query and returns the updated UserLike entity.
func (uluo *UserLikeUpdateOne) Save(ctx context.Context) (*UserLike, error) {
	return withHooks(ctx, uluo.sqlSave, uluo.mutation, uluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uluo *UserLikeUpdateOne) SaveX(ctx context.Context) *UserLike {
	node, err := uluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uluo *UserLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := uluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uluo *UserLikeUpdateOne) ExecX(ctx context.Context) {
	if err := uluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uluo *UserLikeUpdateOne) check() error {
	if v, ok := uluo.mutation.UserID(); ok {
		if err := userlike.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`gen: validator failed for field "UserLike.user_id": %w`, err)}
		}
	}
	if v, ok := uluo.mutation.PostID(); ok {
		if err := userlike.PostIDValidator(v); err != nil {
			return &ValidationError{Name: "post_id", err: fmt.Errorf(`gen: validator failed for field "UserLike.post_id": %w`, err)}
		}
	}
	if uluo.mutation.UserCleared() && len(uluo.mutation.UserIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "UserLike.user"`)
	}
	if uluo.mutation.PostCleared() && len(uluo.mutation.PostIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "UserLike.post"`)
	}
	return nil
}

func (uluo *UserLikeUpdateOne) sqlSave(ctx context.Context) (_node *UserLike, err error) {
	if err := uluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userlike.Table, userlike.Columns, sqlgraph.NewFieldSpec(userlike.FieldID, field.TypeInt))
	id, ok := uluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "UserLike.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userlike.FieldID)
		for _, f := range fields {
			if !userlike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != userlike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlike.UserTable,
			Columns: []string{userlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlike.UserTable,
			Columns: []string{userlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uluo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlike.PostTable,
			Columns: []string{userlike.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlike.PostTable,
			Columns: []string{userlike.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserLike{config: uluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uluo.mutation.done = true
	return _node, nil
}
