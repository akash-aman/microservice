// Code generated by ent, DO NOT EDIT.

package gen

import (
	"products/ent/schema"
	"time"
)

// CreateCommentInput represents a mutation input for creating comments.
type CreateCommentInput struct {
	Content   string
	CreatedAt *time.Time
	UpdatedAt *time.Time
	AuthorID  int
	PostID    int
}

// Mutate applies the CreateCommentInput on the CommentMutation builder.
func (i *CreateCommentInput) Mutate(m *CommentMutation) {
	m.SetContent(i.Content)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetAuthorID(i.AuthorID)
	m.SetPostID(i.PostID)
}

// SetInput applies the change-set in the CreateCommentInput on the CommentCreate builder.
func (c *CommentCreate) SetInput(i CreateCommentInput) *CommentCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCommentInput represents a mutation input for updating comments.
type UpdateCommentInput struct {
	Content   *string
	UpdatedAt *time.Time
	AuthorID  *int
	PostID    *int
}

// Mutate applies the UpdateCommentInput on the CommentMutation builder.
func (i *UpdateCommentInput) Mutate(m *CommentMutation) {
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.AuthorID; v != nil {
		m.SetAuthorID(*v)
	}
	if v := i.PostID; v != nil {
		m.SetPostID(*v)
	}
}

// SetInput applies the change-set in the UpdateCommentInput on the CommentUpdate builder.
func (c *CommentUpdate) SetInput(i UpdateCommentInput) *CommentUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCommentInput on the CommentUpdateOne builder.
func (c *CommentUpdateOne) SetInput(i UpdateCommentInput) *CommentUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePostInput represents a mutation input for creating posts.
type CreatePostInput struct {
	Title      string
	Content    string
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	Status     *schema.Status
	AuthorIDs  []int
	CommentIDs []int
	LikedByIDs []int
}

// Mutate applies the CreatePostInput on the PostMutation builder.
func (i *CreatePostInput) Mutate(m *PostMutation) {
	m.SetTitle(i.Title)
	m.SetContent(i.Content)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.AuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.CommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
	if v := i.LikedByIDs; len(v) > 0 {
		m.AddLikedByIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePostInput on the PostCreate builder.
func (c *PostCreate) SetInput(i CreatePostInput) *PostCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePostInput represents a mutation input for updating posts.
type UpdatePostInput struct {
	Title            *string
	Content          *string
	UpdatedAt        *time.Time
	Status           *schema.Status
	ClearAuthors     bool
	AddAuthorIDs     []int
	RemoveAuthorIDs  []int
	ClearComments    bool
	AddCommentIDs    []int
	RemoveCommentIDs []int
	ClearLikedBy     bool
	AddLikedByIDs    []int
	RemoveLikedByIDs []int
}

// Mutate applies the UpdatePostInput on the PostMutation builder.
func (i *UpdatePostInput) Mutate(m *PostMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearAuthors {
		m.ClearAuthors()
	}
	if v := i.AddAuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.RemoveAuthorIDs; len(v) > 0 {
		m.RemoveAuthorIDs(v...)
	}
	if i.ClearComments {
		m.ClearComments()
	}
	if v := i.AddCommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
	if v := i.RemoveCommentIDs; len(v) > 0 {
		m.RemoveCommentIDs(v...)
	}
	if i.ClearLikedBy {
		m.ClearLikedBy()
	}
	if v := i.AddLikedByIDs; len(v) > 0 {
		m.AddLikedByIDs(v...)
	}
	if v := i.RemoveLikedByIDs; len(v) > 0 {
		m.RemoveLikedByIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePostInput on the PostUpdate builder.
func (c *PostUpdate) SetInput(i UpdatePostInput) *PostUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePostInput on the PostUpdateOne builder.
func (c *PostUpdateOne) SetInput(i UpdatePostInput) *PostUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Username        string
	Email           string
	CreatedAt       *time.Time
	UpdatedAt       *time.Time
	IsActive        *bool
	AuthoredPostIDs []int
	CommentIDs      []int
	LikeIDs         []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetUsername(i.Username)
	m.SetEmail(i.Email)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.AuthoredPostIDs; len(v) > 0 {
		m.AddAuthoredPostIDs(v...)
	}
	if v := i.CommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
	if v := i.LikeIDs; len(v) > 0 {
		m.AddLikeIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Username              *string
	Email                 *string
	UpdatedAt             *time.Time
	IsActive              *bool
	ClearAuthoredPosts    bool
	AddAuthoredPostIDs    []int
	RemoveAuthoredPostIDs []int
	ClearComments         bool
	AddCommentIDs         []int
	RemoveCommentIDs      []int
	ClearLikes            bool
	AddLikeIDs            []int
	RemoveLikeIDs         []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if i.ClearAuthoredPosts {
		m.ClearAuthoredPosts()
	}
	if v := i.AddAuthoredPostIDs; len(v) > 0 {
		m.AddAuthoredPostIDs(v...)
	}
	if v := i.RemoveAuthoredPostIDs; len(v) > 0 {
		m.RemoveAuthoredPostIDs(v...)
	}
	if i.ClearComments {
		m.ClearComments()
	}
	if v := i.AddCommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
	if v := i.RemoveCommentIDs; len(v) > 0 {
		m.RemoveCommentIDs(v...)
	}
	if i.ClearLikes {
		m.ClearLikes()
	}
	if v := i.AddLikeIDs; len(v) > 0 {
		m.AddLikeIDs(v...)
	}
	if v := i.RemoveLikeIDs; len(v) > 0 {
		m.RemoveLikeIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserLikeInput represents a mutation input for creating userlikes.
type CreateUserLikeInput struct {
	CreatedAt *time.Time
	UserID    int
	PostID    int
}

// Mutate applies the CreateUserLikeInput on the UserLikeMutation builder.
func (i *CreateUserLikeInput) Mutate(m *UserLikeMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	m.SetUserID(i.UserID)
	m.SetPostID(i.PostID)
}

// SetInput applies the change-set in the CreateUserLikeInput on the UserLikeCreate builder.
func (c *UserLikeCreate) SetInput(i CreateUserLikeInput) *UserLikeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserLikeInput represents a mutation input for updating userlikes.
type UpdateUserLikeInput struct {
	UserID *int
	PostID *int
}

// Mutate applies the UpdateUserLikeInput on the UserLikeMutation builder.
func (i *UpdateUserLikeInput) Mutate(m *UserLikeMutation) {
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.PostID; v != nil {
		m.SetPostID(*v)
	}
}

// SetInput applies the change-set in the UpdateUserLikeInput on the UserLikeUpdate builder.
func (c *UserLikeUpdate) SetInput(i UpdateUserLikeInput) *UserLikeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserLikeInput on the UserLikeUpdateOne builder.
func (c *UserLikeUpdateOne) SetInput(i UpdateUserLikeInput) *UserLikeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserPostInput represents a mutation input for creating userposts.
type CreateUserPostInput struct {
	CreatedAt *time.Time
	Role      *schema.Role
	UserID    int
	PostID    int
}

// Mutate applies the CreateUserPostInput on the UserPostMutation builder.
func (i *CreateUserPostInput) Mutate(m *UserPostMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	m.SetUserID(i.UserID)
	m.SetPostID(i.PostID)
}

// SetInput applies the change-set in the CreateUserPostInput on the UserPostCreate builder.
func (c *UserPostCreate) SetInput(i CreateUserPostInput) *UserPostCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserPostInput represents a mutation input for updating userposts.
type UpdateUserPostInput struct {
	Role   *schema.Role
	UserID *int
	PostID *int
}

// Mutate applies the UpdateUserPostInput on the UserPostMutation builder.
func (i *UpdateUserPostInput) Mutate(m *UserPostMutation) {
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.PostID; v != nil {
		m.SetPostID(*v)
	}
}

// SetInput applies the change-set in the UpdateUserPostInput on the UserPostUpdate builder.
func (c *UserPostUpdate) SetInput(i UpdateUserPostInput) *UserPostUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserPostInput on the UserPostUpdateOne builder.
func (c *UserPostUpdateOne) SetInput(i UpdateUserPostInput) *UserPostUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
