// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"products/ent/gen/post"
	"products/ent/gen/user"
	"products/ent/gen/userlike"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserLike is the model entity for the UserLike schema.
type UserLike struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID int `json:"post_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserLikeQuery when eager-loading is set.
	Edges        UserLikeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserLikeEdges holds the relations/edges for other nodes in the graph.
type UserLikeEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserLikeEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserLikeEdges) PostOrErr() (*Post, error) {
	if e.Post != nil {
		return e.Post, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: post.Label}
	}
	return nil, &NotLoadedError{edge: "post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserLike) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userlike.FieldID, userlike.FieldUserID, userlike.FieldPostID:
			values[i] = new(sql.NullInt64)
		case userlike.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserLike fields.
func (ul *UserLike) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userlike.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ul.ID = int(value.Int64)
		case userlike.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ul.UserID = int(value.Int64)
			}
		case userlike.FieldPostID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value.Valid {
				ul.PostID = int(value.Int64)
			}
		case userlike.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ul.CreatedAt = value.Time
			}
		default:
			ul.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserLike.
// This includes values selected through modifiers, order, etc.
func (ul *UserLike) Value(name string) (ent.Value, error) {
	return ul.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserLike entity.
func (ul *UserLike) QueryUser() *UserQuery {
	return NewUserLikeClient(ul.config).QueryUser(ul)
}

// QueryPost queries the "post" edge of the UserLike entity.
func (ul *UserLike) QueryPost() *PostQuery {
	return NewUserLikeClient(ul.config).QueryPost(ul)
}

// Update returns a builder for updating this UserLike.
// Note that you need to call UserLike.Unwrap() before calling this method if this UserLike
// was returned from a transaction, and the transaction was committed or rolled back.
func (ul *UserLike) Update() *UserLikeUpdateOne {
	return NewUserLikeClient(ul.config).UpdateOne(ul)
}

// Unwrap unwraps the UserLike entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ul *UserLike) Unwrap() *UserLike {
	_tx, ok := ul.config.driver.(*txDriver)
	if !ok {
		panic("gen: UserLike is not a transactional entity")
	}
	ul.config.driver = _tx.drv
	return ul
}

// String implements the fmt.Stringer.
func (ul *UserLike) String() string {
	var builder strings.Builder
	builder.WriteString("UserLike(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ul.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ul.UserID))
	builder.WriteString(", ")
	builder.WriteString("post_id=")
	builder.WriteString(fmt.Sprintf("%v", ul.PostID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ul.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserLikes is a parsable slice of UserLike.
type UserLikes []*UserLike
