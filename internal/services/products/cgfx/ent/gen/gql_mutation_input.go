// Code generated by ent, DO NOT EDIT.

package gen

import (
	"products/cgfx/ent/gen/order"
	"time"

	"github.com/google/uuid"
)

// CreateOrderInput represents a mutation input for creating orders.
type CreateOrderInput struct {
	Status    *order.Status
	Total     float64
	CreatedAt *time.Time
	UpdatedAt *time.Time
	UserID    *uuid.UUID
}

// Mutate applies the CreateOrderInput on the OrderMutation builder.
func (i *CreateOrderInput) Mutate(m *OrderMutation) {
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	m.SetTotal(i.Total)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the CreateOrderInput on the OrderCreate builder.
func (c *OrderCreate) SetInput(i CreateOrderInput) *OrderCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrderInput represents a mutation input for updating orders.
type UpdateOrderInput struct {
	Status    *order.Status
	Total     *float64
	UpdatedAt *time.Time
	ClearUser bool
	UserID    *uuid.UUID
}

// Mutate applies the UpdateOrderInput on the OrderMutation builder.
func (i *UpdateOrderInput) Mutate(m *OrderMutation) {
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Total; v != nil {
		m.SetTotal(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateOrderInput on the OrderUpdate builder.
func (c *OrderUpdate) SetInput(i UpdateOrderInput) *OrderUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrderInput on the OrderUpdateOne builder.
func (c *OrderUpdateOne) SetInput(i UpdateOrderInput) *OrderUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Firstname string
	Lastname  string
	Username  string
	Email     string
	CreatedAt *time.Time
	UpdatedAt *time.Time
	OrderIDs  []uuid.UUID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetFirstname(i.Firstname)
	m.SetLastname(i.Lastname)
	m.SetUsername(i.Username)
	m.SetEmail(i.Email)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.OrderIDs; len(v) > 0 {
		m.AddOrderIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Firstname      *string
	Lastname       *string
	Username       *string
	Email          *string
	UpdatedAt      *time.Time
	ClearOrders    bool
	AddOrderIDs    []uuid.UUID
	RemoveOrderIDs []uuid.UUID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Firstname; v != nil {
		m.SetFirstname(*v)
	}
	if v := i.Lastname; v != nil {
		m.SetLastname(*v)
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearOrders {
		m.ClearOrders()
	}
	if v := i.AddOrderIDs; len(v) > 0 {
		m.AddOrderIDs(v...)
	}
	if v := i.RemoveOrderIDs; len(v) > 0 {
		m.RemoveOrderIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
