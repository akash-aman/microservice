// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"products/cgfx/ent/gen/post"
	"products/cgfx/ent/gen/predicate"
	"products/cgfx/ent/gen/user"
	"products/cgfx/ent/gen/userpost"
	"products/cgfx/ent/schema"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPostUpdate is the builder for updating UserPost entities.
type UserPostUpdate struct {
	config
	hooks    []Hook
	mutation *UserPostMutation
}

// Where appends a list predicates to the UserPostUpdate builder.
func (upu *UserPostUpdate) Where(ps ...predicate.UserPost) *UserPostUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetUserID sets the "user_id" field.
func (upu *UserPostUpdate) SetUserID(i int) *UserPostUpdate {
	upu.mutation.SetUserID(i)
	return upu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upu *UserPostUpdate) SetNillableUserID(i *int) *UserPostUpdate {
	if i != nil {
		upu.SetUserID(*i)
	}
	return upu
}

// SetPostID sets the "post_id" field.
func (upu *UserPostUpdate) SetPostID(i int) *UserPostUpdate {
	upu.mutation.SetPostID(i)
	return upu
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (upu *UserPostUpdate) SetNillablePostID(i *int) *UserPostUpdate {
	if i != nil {
		upu.SetPostID(*i)
	}
	return upu
}

// SetRole sets the "role" field.
func (upu *UserPostUpdate) SetRole(s schema.Role) *UserPostUpdate {
	upu.mutation.SetRole(s)
	return upu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (upu *UserPostUpdate) SetNillableRole(s *schema.Role) *UserPostUpdate {
	if s != nil {
		upu.SetRole(*s)
	}
	return upu
}

// SetUser sets the "user" edge to the User entity.
func (upu *UserPostUpdate) SetUser(u *User) *UserPostUpdate {
	return upu.SetUserID(u.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (upu *UserPostUpdate) SetPost(p *Post) *UserPostUpdate {
	return upu.SetPostID(p.ID)
}

// Mutation returns the UserPostMutation object of the builder.
func (upu *UserPostUpdate) Mutation() *UserPostMutation {
	return upu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upu *UserPostUpdate) ClearUser() *UserPostUpdate {
	upu.mutation.ClearUser()
	return upu
}

// ClearPost clears the "post" edge to the Post entity.
func (upu *UserPostUpdate) ClearPost() *UserPostUpdate {
	upu.mutation.ClearPost()
	return upu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserPostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserPostUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserPostUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserPostUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upu *UserPostUpdate) check() error {
	if v, ok := upu.mutation.UserID(); ok {
		if err := userpost.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`gen: validator failed for field "UserPost.user_id": %w`, err)}
		}
	}
	if v, ok := upu.mutation.PostID(); ok {
		if err := userpost.PostIDValidator(v); err != nil {
			return &ValidationError{Name: "post_id", err: fmt.Errorf(`gen: validator failed for field "UserPost.post_id": %w`, err)}
		}
	}
	if upu.mutation.UserCleared() && len(upu.mutation.UserIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "UserPost.user"`)
	}
	if upu.mutation.PostCleared() && len(upu.mutation.PostIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "UserPost.post"`)
	}
	return nil
}

func (upu *UserPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := upu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpost.Table, userpost.Columns, sqlgraph.NewFieldSpec(userpost.FieldID, field.TypeInt))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.Role(); ok {
		_spec.SetField(userpost.FieldRole, field.TypeString, value)
	}
	if upu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpost.UserTable,
			Columns: []string{userpost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpost.UserTable,
			Columns: []string{userpost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpost.PostTable,
			Columns: []string{userpost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpost.PostTable,
			Columns: []string{userpost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserPostUpdateOne is the builder for updating a single UserPost entity.
type UserPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPostMutation
}

// SetUserID sets the "user_id" field.
func (upuo *UserPostUpdateOne) SetUserID(i int) *UserPostUpdateOne {
	upuo.mutation.SetUserID(i)
	return upuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upuo *UserPostUpdateOne) SetNillableUserID(i *int) *UserPostUpdateOne {
	if i != nil {
		upuo.SetUserID(*i)
	}
	return upuo
}

// SetPostID sets the "post_id" field.
func (upuo *UserPostUpdateOne) SetPostID(i int) *UserPostUpdateOne {
	upuo.mutation.SetPostID(i)
	return upuo
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (upuo *UserPostUpdateOne) SetNillablePostID(i *int) *UserPostUpdateOne {
	if i != nil {
		upuo.SetPostID(*i)
	}
	return upuo
}

// SetRole sets the "role" field.
func (upuo *UserPostUpdateOne) SetRole(s schema.Role) *UserPostUpdateOne {
	upuo.mutation.SetRole(s)
	return upuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (upuo *UserPostUpdateOne) SetNillableRole(s *schema.Role) *UserPostUpdateOne {
	if s != nil {
		upuo.SetRole(*s)
	}
	return upuo
}

// SetUser sets the "user" edge to the User entity.
func (upuo *UserPostUpdateOne) SetUser(u *User) *UserPostUpdateOne {
	return upuo.SetUserID(u.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (upuo *UserPostUpdateOne) SetPost(p *Post) *UserPostUpdateOne {
	return upuo.SetPostID(p.ID)
}

// Mutation returns the UserPostMutation object of the builder.
func (upuo *UserPostUpdateOne) Mutation() *UserPostMutation {
	return upuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upuo *UserPostUpdateOne) ClearUser() *UserPostUpdateOne {
	upuo.mutation.ClearUser()
	return upuo
}

// ClearPost clears the "post" edge to the Post entity.
func (upuo *UserPostUpdateOne) ClearPost() *UserPostUpdateOne {
	upuo.mutation.ClearPost()
	return upuo
}

// Where appends a list predicates to the UserPostUpdate builder.
func (upuo *UserPostUpdateOne) Where(ps ...predicate.UserPost) *UserPostUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserPostUpdateOne) Select(field string, fields ...string) *UserPostUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserPost entity.
func (upuo *UserPostUpdateOne) Save(ctx context.Context) (*UserPost, error) {
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserPostUpdateOne) SaveX(ctx context.Context) *UserPost {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserPostUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserPostUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upuo *UserPostUpdateOne) check() error {
	if v, ok := upuo.mutation.UserID(); ok {
		if err := userpost.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`gen: validator failed for field "UserPost.user_id": %w`, err)}
		}
	}
	if v, ok := upuo.mutation.PostID(); ok {
		if err := userpost.PostIDValidator(v); err != nil {
			return &ValidationError{Name: "post_id", err: fmt.Errorf(`gen: validator failed for field "UserPost.post_id": %w`, err)}
		}
	}
	if upuo.mutation.UserCleared() && len(upuo.mutation.UserIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "UserPost.user"`)
	}
	if upuo.mutation.PostCleared() && len(upuo.mutation.PostIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "UserPost.post"`)
	}
	return nil
}

func (upuo *UserPostUpdateOne) sqlSave(ctx context.Context) (_node *UserPost, err error) {
	if err := upuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpost.Table, userpost.Columns, sqlgraph.NewFieldSpec(userpost.FieldID, field.TypeInt))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "UserPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpost.FieldID)
		for _, f := range fields {
			if !userpost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != userpost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.Role(); ok {
		_spec.SetField(userpost.FieldRole, field.TypeString, value)
	}
	if upuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpost.UserTable,
			Columns: []string{userpost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpost.UserTable,
			Columns: []string{userpost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpost.PostTable,
			Columns: []string{userpost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpost.PostTable,
			Columns: []string{userpost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPost{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
