// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"products/cgfx/ent/gen/post"
	"products/cgfx/ent/gen/user"
	"products/cgfx/ent/gen/userlike"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserLikeCreate is the builder for creating a UserLike entity.
type UserLikeCreate struct {
	config
	mutation *UserLikeMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ulc *UserLikeCreate) SetUserID(i int) *UserLikeCreate {
	ulc.mutation.SetUserID(i)
	return ulc
}

// SetPostID sets the "post_id" field.
func (ulc *UserLikeCreate) SetPostID(i int) *UserLikeCreate {
	ulc.mutation.SetPostID(i)
	return ulc
}

// SetCreatedAt sets the "created_at" field.
func (ulc *UserLikeCreate) SetCreatedAt(t time.Time) *UserLikeCreate {
	ulc.mutation.SetCreatedAt(t)
	return ulc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ulc *UserLikeCreate) SetNillableCreatedAt(t *time.Time) *UserLikeCreate {
	if t != nil {
		ulc.SetCreatedAt(*t)
	}
	return ulc
}

// SetID sets the "id" field.
func (ulc *UserLikeCreate) SetID(i int) *UserLikeCreate {
	ulc.mutation.SetID(i)
	return ulc
}

// SetUser sets the "user" edge to the User entity.
func (ulc *UserLikeCreate) SetUser(u *User) *UserLikeCreate {
	return ulc.SetUserID(u.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (ulc *UserLikeCreate) SetPost(p *Post) *UserLikeCreate {
	return ulc.SetPostID(p.ID)
}

// Mutation returns the UserLikeMutation object of the builder.
func (ulc *UserLikeCreate) Mutation() *UserLikeMutation {
	return ulc.mutation
}

// Save creates the UserLike in the database.
func (ulc *UserLikeCreate) Save(ctx context.Context) (*UserLike, error) {
	ulc.defaults()
	return withHooks(ctx, ulc.sqlSave, ulc.mutation, ulc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ulc *UserLikeCreate) SaveX(ctx context.Context) *UserLike {
	v, err := ulc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ulc *UserLikeCreate) Exec(ctx context.Context) error {
	_, err := ulc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulc *UserLikeCreate) ExecX(ctx context.Context) {
	if err := ulc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ulc *UserLikeCreate) defaults() {
	if _, ok := ulc.mutation.CreatedAt(); !ok {
		v := userlike.DefaultCreatedAt()
		ulc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ulc *UserLikeCreate) check() error {
	if _, ok := ulc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`gen: missing required field "UserLike.user_id"`)}
	}
	if v, ok := ulc.mutation.UserID(); ok {
		if err := userlike.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`gen: validator failed for field "UserLike.user_id": %w`, err)}
		}
	}
	if _, ok := ulc.mutation.PostID(); !ok {
		return &ValidationError{Name: "post_id", err: errors.New(`gen: missing required field "UserLike.post_id"`)}
	}
	if v, ok := ulc.mutation.PostID(); ok {
		if err := userlike.PostIDValidator(v); err != nil {
			return &ValidationError{Name: "post_id", err: fmt.Errorf(`gen: validator failed for field "UserLike.post_id": %w`, err)}
		}
	}
	if _, ok := ulc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "UserLike.created_at"`)}
	}
	if v, ok := ulc.mutation.ID(); ok {
		if err := userlike.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`gen: validator failed for field "UserLike.id": %w`, err)}
		}
	}
	if len(ulc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`gen: missing required edge "UserLike.user"`)}
	}
	if len(ulc.mutation.PostIDs()) == 0 {
		return &ValidationError{Name: "post", err: errors.New(`gen: missing required edge "UserLike.post"`)}
	}
	return nil
}

func (ulc *UserLikeCreate) sqlSave(ctx context.Context) (*UserLike, error) {
	if err := ulc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ulc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ulc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ulc.mutation.id = &_node.ID
	ulc.mutation.done = true
	return _node, nil
}

func (ulc *UserLikeCreate) createSpec() (*UserLike, *sqlgraph.CreateSpec) {
	var (
		_node = &UserLike{config: ulc.config}
		_spec = sqlgraph.NewCreateSpec(userlike.Table, sqlgraph.NewFieldSpec(userlike.FieldID, field.TypeInt))
	)
	if id, ok := ulc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ulc.mutation.CreatedAt(); ok {
		_spec.SetField(userlike.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ulc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlike.UserTable,
			Columns: []string{userlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ulc.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlike.PostTable,
			Columns: []string{userlike.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PostID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserLikeCreateBulk is the builder for creating many UserLike entities in bulk.
type UserLikeCreateBulk struct {
	config
	err      error
	builders []*UserLikeCreate
}

// Save creates the UserLike entities in the database.
func (ulcb *UserLikeCreateBulk) Save(ctx context.Context) ([]*UserLike, error) {
	if ulcb.err != nil {
		return nil, ulcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ulcb.builders))
	nodes := make([]*UserLike, len(ulcb.builders))
	mutators := make([]Mutator, len(ulcb.builders))
	for i := range ulcb.builders {
		func(i int, root context.Context) {
			builder := ulcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserLikeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ulcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ulcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ulcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ulcb *UserLikeCreateBulk) SaveX(ctx context.Context) []*UserLike {
	v, err := ulcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ulcb *UserLikeCreateBulk) Exec(ctx context.Context) error {
	_, err := ulcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulcb *UserLikeCreateBulk) ExecX(ctx context.Context) {
	if err := ulcb.Exec(ctx); err != nil {
		panic(err)
	}
}
