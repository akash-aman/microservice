// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"products/cgfx/ent/gen/post"
	"products/cgfx/ent/schema"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Post is the model entity for the Post schema.
type Post struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status holds the value of the "status" field.
	Status schema.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostQuery when eager-loading is set.
	Edges        PostEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PostEdges holds the relations/edges for other nodes in the graph.
type PostEdges struct {
	// Authors holds the value of the authors edge.
	Authors []*User `json:"authors,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// LikedBy holds the value of the liked_by edge.
	LikedBy []*User `json:"liked_by,omitempty"`
	// UserPosts holds the value of the user_posts edge.
	UserPosts []*UserPost `json:"user_posts,omitempty"`
	// UserLikes holds the value of the user_likes edge.
	UserLikes []*UserLike `json:"user_likes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedAuthors   map[string][]*User
	namedComments  map[string][]*Comment
	namedLikedBy   map[string][]*User
	namedUserPosts map[string][]*UserPost
	namedUserLikes map[string][]*UserLike
}

// AuthorsOrErr returns the Authors value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) AuthorsOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Authors, nil
	}
	return nil, &NotLoadedError{edge: "authors"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[1] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// LikedByOrErr returns the LikedBy value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) LikedByOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.LikedBy, nil
	}
	return nil, &NotLoadedError{edge: "liked_by"}
}

// UserPostsOrErr returns the UserPosts value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) UserPostsOrErr() ([]*UserPost, error) {
	if e.loadedTypes[3] {
		return e.UserPosts, nil
	}
	return nil, &NotLoadedError{edge: "user_posts"}
}

// UserLikesOrErr returns the UserLikes value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) UserLikesOrErr() ([]*UserLike, error) {
	if e.loadedTypes[4] {
		return e.UserLikes, nil
	}
	return nil, &NotLoadedError{edge: "user_likes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Post) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case post.FieldID:
			values[i] = new(sql.NullInt64)
		case post.FieldTitle, post.FieldContent, post.FieldStatus:
			values[i] = new(sql.NullString)
		case post.FieldCreatedAt, post.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Post fields.
func (po *Post) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case post.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case post.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				po.Title = value.String
			}
		case post.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				po.Content = value.String
			}
		case post.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case post.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				po.UpdatedAt = value.Time
			}
		case post.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				po.Status = schema.Status(value.String)
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Post.
// This includes values selected through modifiers, order, etc.
func (po *Post) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QueryAuthors queries the "authors" edge of the Post entity.
func (po *Post) QueryAuthors() *UserQuery {
	return NewPostClient(po.config).QueryAuthors(po)
}

// QueryComments queries the "comments" edge of the Post entity.
func (po *Post) QueryComments() *CommentQuery {
	return NewPostClient(po.config).QueryComments(po)
}

// QueryLikedBy queries the "liked_by" edge of the Post entity.
func (po *Post) QueryLikedBy() *UserQuery {
	return NewPostClient(po.config).QueryLikedBy(po)
}

// QueryUserPosts queries the "user_posts" edge of the Post entity.
func (po *Post) QueryUserPosts() *UserPostQuery {
	return NewPostClient(po.config).QueryUserPosts(po)
}

// QueryUserLikes queries the "user_likes" edge of the Post entity.
func (po *Post) QueryUserLikes() *UserLikeQuery {
	return NewPostClient(po.config).QueryUserLikes(po)
}

// Update returns a builder for updating this Post.
// Note that you need to call Post.Unwrap() before calling this method if this Post
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Post) Update() *PostUpdateOne {
	return NewPostClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Post entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Post) Unwrap() *Post {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("gen: Post is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Post) String() string {
	var builder strings.Builder
	builder.WriteString("Post(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("title=")
	builder.WriteString(po.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(po.Content)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(po.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", po.Status))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAuthors returns the Authors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (po *Post) NamedAuthors(name string) ([]*User, error) {
	if po.Edges.namedAuthors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := po.Edges.namedAuthors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (po *Post) appendNamedAuthors(name string, edges ...*User) {
	if po.Edges.namedAuthors == nil {
		po.Edges.namedAuthors = make(map[string][]*User)
	}
	if len(edges) == 0 {
		po.Edges.namedAuthors[name] = []*User{}
	} else {
		po.Edges.namedAuthors[name] = append(po.Edges.namedAuthors[name], edges...)
	}
}

// NamedComments returns the Comments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (po *Post) NamedComments(name string) ([]*Comment, error) {
	if po.Edges.namedComments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := po.Edges.namedComments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (po *Post) appendNamedComments(name string, edges ...*Comment) {
	if po.Edges.namedComments == nil {
		po.Edges.namedComments = make(map[string][]*Comment)
	}
	if len(edges) == 0 {
		po.Edges.namedComments[name] = []*Comment{}
	} else {
		po.Edges.namedComments[name] = append(po.Edges.namedComments[name], edges...)
	}
}

// NamedLikedBy returns the LikedBy named value or an error if the edge was not
// loaded in eager-loading with this name.
func (po *Post) NamedLikedBy(name string) ([]*User, error) {
	if po.Edges.namedLikedBy == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := po.Edges.namedLikedBy[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (po *Post) appendNamedLikedBy(name string, edges ...*User) {
	if po.Edges.namedLikedBy == nil {
		po.Edges.namedLikedBy = make(map[string][]*User)
	}
	if len(edges) == 0 {
		po.Edges.namedLikedBy[name] = []*User{}
	} else {
		po.Edges.namedLikedBy[name] = append(po.Edges.namedLikedBy[name], edges...)
	}
}

// NamedUserPosts returns the UserPosts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (po *Post) NamedUserPosts(name string) ([]*UserPost, error) {
	if po.Edges.namedUserPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := po.Edges.namedUserPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (po *Post) appendNamedUserPosts(name string, edges ...*UserPost) {
	if po.Edges.namedUserPosts == nil {
		po.Edges.namedUserPosts = make(map[string][]*UserPost)
	}
	if len(edges) == 0 {
		po.Edges.namedUserPosts[name] = []*UserPost{}
	} else {
		po.Edges.namedUserPosts[name] = append(po.Edges.namedUserPosts[name], edges...)
	}
}

// NamedUserLikes returns the UserLikes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (po *Post) NamedUserLikes(name string) ([]*UserLike, error) {
	if po.Edges.namedUserLikes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := po.Edges.namedUserLikes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (po *Post) appendNamedUserLikes(name string, edges ...*UserLike) {
	if po.Edges.namedUserLikes == nil {
		po.Edges.namedUserLikes = make(map[string][]*UserLike)
	}
	if len(edges) == 0 {
		po.Edges.namedUserLikes[name] = []*UserLike{}
	} else {
		po.Edges.namedUserLikes[name] = append(po.Edges.namedUserLikes[name], edges...)
	}
}

// Posts is a parsable slice of Post.
type Posts []*Post
