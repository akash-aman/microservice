directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateOrderInput is used for create Order object.
Input was generated by ent.
"""
input CreateOrderInput {
  status: OrderStatus
  total: Float!
  createdAt: Time
  updatedAt: Time
  userID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  firstname: String!
  lastname: String!
  username: String!
  email: String!
  createdAt: Time
  updatedAt: Time
  orderIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "products/cgfx/ent/gen.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
type Order implements Node {
  id: ID!
  status: OrderStatus!
  total: Float!
  createdAt: Time!
  updatedAt: Time!
  user: User
}
"""
A connection to a list of items.
"""
type OrderConnection {
  """
  A list of edges.
  """
  edges: [OrderEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
An edge in a connection.
"""
type OrderEdge {
  """
  The item at the end of the edge.
  """
  node: Order
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Order connections
"""
input OrderOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Orders.
  """
  field: OrderOrderField!
}
"""
Properties by which Order connections can be ordered.
"""
enum OrderOrderField {
  ID
  STATUS
  TOTAL
  CREATED_AT
  UPDATED_AT
}
"""
OrderStatus is enum for the field status
"""
enum OrderStatus @goModel(model: "products/cgfx/ent/gen/order.Status") {
  pending
  completed
  cancelled
}
"""
OrderWhereInput is used for filtering Order objects.
Input was generated by ent.
"""
input OrderWhereInput {
  not: OrderWhereInput
  and: [OrderWhereInput!]
  or: [OrderWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  status field predicates
  """
  status: OrderStatus
  statusNEQ: OrderStatus
  statusIn: [OrderStatus!]
  statusNotIn: [OrderStatus!]
  """
  total field predicates
  """
  total: Float
  totalNEQ: Float
  totalIn: [Float!]
  totalNotIn: [Float!]
  totalGT: Float
  totalGTE: Float
  totalLT: Float
  totalLTE: Float
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  """
  This is the order item
  """
  orders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Orders returned from the connection.
    """
    orderBy: [OrderOrder!]

    """
    Filtering options for Orders returned from the connection.
    """
    where: OrderWhereInput
  ): OrderConnection!
  """
  This is the single user
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: [UserOrder!]

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateOrderInput is used for update Order object.
Input was generated by ent.
"""
input UpdateOrderInput {
  status: OrderStatus
  total: Float
  updatedAt: Time
  userID: ID
  clearUser: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  firstname: String
  lastname: String
  username: String
  email: String
  updatedAt: Time
  addOrderIDs: [ID!]
  removeOrderIDs: [ID!]
  clearOrders: Boolean
}
type User implements Node {
  id: ID!
  firstname: String!
  lastname: String!
  username: String!
  email: String!
  createdAt: Time!
  updatedAt: Time!
  orders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Orders returned from the connection.
    """
    orderBy: [OrderOrder!]

    """
    Filtering options for Orders returned from the connection.
    """
    where: OrderWhereInput
  ): OrderConnection!
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  ID
  FIRSTNAME
  LASTNAME
  USERNAME
  EMAIL
  CREATED_AT
  UPDATED_AT
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  firstname field predicates
  """
  firstname: String
  firstnameNEQ: String
  firstnameIn: [String!]
  firstnameNotIn: [String!]
  firstnameGT: String
  firstnameGTE: String
  firstnameLT: String
  firstnameLTE: String
  firstnameContains: String
  firstnameHasPrefix: String
  firstnameHasSuffix: String
  firstnameEqualFold: String
  firstnameContainsFold: String
  """
  lastname field predicates
  """
  lastname: String
  lastnameNEQ: String
  lastnameIn: [String!]
  lastnameNotIn: [String!]
  lastnameGT: String
  lastnameGTE: String
  lastnameLT: String
  lastnameLTE: String
  lastnameContains: String
  lastnameHasPrefix: String
  lastnameHasSuffix: String
  lastnameEqualFold: String
  lastnameContainsFold: String
  """
  username field predicates
  """
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  orders edge predicates
  """
  hasOrders: Boolean
  hasOrdersWith: [OrderWhereInput!]
}
