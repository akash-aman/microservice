directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Comment implements Node {
  id: ID!
  content: String!
  createdAt: Time!
  updatedAt: Time!
  author: User!
  post: Post!
}
"""
A connection to a list of items.
"""
type CommentConnection {
  """
  A list of edges.
  """
  edges: [CommentEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CommentEdge {
  """
  The item at the end of the edge.
  """
  node: Comment
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Comment connections
"""
input CommentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Comments.
  """
  field: CommentOrderField!
}
"""
Properties by which Comment connections can be ordered.
"""
enum CommentOrderField {
  ID
  CONTENT
  CREATED_AT
  UPDATED_AT
}
"""
CreateCommentInput is used for create Comment object.
Input was generated by ent.
"""
input CreateCommentInput {
  content: String!
  createdAt: Time
  updatedAt: Time
  authorID: ID!
  postID: ID!
}
"""
CreatePostInput is used for create Post object.
Input was generated by ent.
"""
input CreatePostInput {
  title: String!
  content: String!
  createdAt: Time
  updatedAt: Time
  status: String
  authorIDs: [ID!]
  commentIDs: [ID!]
  likedByIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  username: String!
  email: String!
  createdAt: Time
  updatedAt: Time
  isActive: Boolean
  authoredPostIDs: [ID!]
  commentIDs: [ID!]
  likeIDs: [ID!]
}
"""
CreateUserLikeInput is used for create UserLike object.
Input was generated by ent.
"""
input CreateUserLikeInput {
  createdAt: Time
  userID: ID!
  postID: ID!
}
"""
CreateUserPostInput is used for create UserPost object.
Input was generated by ent.
"""
input CreateUserPostInput {
  createdAt: Time
  role: String
  userID: ID!
  postID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "products/cgfx/ent/gen.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Post implements Node {
  id: ID!
  title: String!
  content: String!
  createdAt: Time!
  updatedAt: Time!
  status: String!
  authors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder
  ): UserConnection!
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Comments returned from the connection.
    """
    orderBy: CommentOrder
  ): CommentConnection!
  likedBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder
  ): UserConnection!
  userPosts: [UserPost!]
  userLikes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for UserLikes returned from the connection.
    """
    orderBy: UserLikeOrder
  ): UserLikeConnection!
}
"""
A connection to a list of items.
"""
type PostConnection {
  """
  A list of edges.
  """
  edges: [PostEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Post connections
"""
input PostOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Posts.
  """
  field: PostOrderField!
}
"""
Properties by which Post connections can be ordered.
"""
enum PostOrderField {
  ID
  TITLE
  CREATED_AT
  UPDATED_AT
  STATUS
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Comments returned from the connection.
    """
    orderBy: CommentOrder
  ): CommentConnection!
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Posts returned from the connection.
    """
    orderBy: PostOrder
  ): PostConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder
  ): UserConnection!
  userLikes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for UserLikes returned from the connection.
    """
    orderBy: UserLikeOrder
  ): UserLikeConnection!
  userPosts: [UserPost!]!
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateCommentInput is used for update Comment object.
Input was generated by ent.
"""
input UpdateCommentInput {
  content: String
  updatedAt: Time
  authorID: ID
  postID: ID
}
"""
UpdatePostInput is used for update Post object.
Input was generated by ent.
"""
input UpdatePostInput {
  title: String
  content: String
  updatedAt: Time
  status: String
  addAuthorIDs: [ID!]
  removeAuthorIDs: [ID!]
  clearAuthors: Boolean
  addCommentIDs: [ID!]
  removeCommentIDs: [ID!]
  clearComments: Boolean
  addLikedByIDs: [ID!]
  removeLikedByIDs: [ID!]
  clearLikedBy: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  username: String
  email: String
  updatedAt: Time
  isActive: Boolean
  addAuthoredPostIDs: [ID!]
  removeAuthoredPostIDs: [ID!]
  clearAuthoredPosts: Boolean
  addCommentIDs: [ID!]
  removeCommentIDs: [ID!]
  clearComments: Boolean
  addLikeIDs: [ID!]
  removeLikeIDs: [ID!]
  clearLikes: Boolean
}
"""
UpdateUserLikeInput is used for update UserLike object.
Input was generated by ent.
"""
input UpdateUserLikeInput {
  userID: ID
  postID: ID
}
"""
UpdateUserPostInput is used for update UserPost object.
Input was generated by ent.
"""
input UpdateUserPostInput {
  role: String
  userID: ID
  postID: ID
}
type User implements Node {
  id: ID!
  username: String!
  email: String!
  createdAt: Time!
  updatedAt: Time!
  isActive: Boolean!
  authoredPosts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Posts returned from the connection.
    """
    orderBy: PostOrder
  ): PostConnection!
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Comments returned from the connection.
    """
    orderBy: CommentOrder
  ): CommentConnection!
  likes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Posts returned from the connection.
    """
    orderBy: PostOrder
  ): PostConnection!
  userPosts: [UserPost!]
  userLikes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for UserLikes returned from the connection.
    """
    orderBy: UserLikeOrder
  ): UserLikeConnection!
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type UserLike implements Node {
  id: ID!
  userID: ID!
  postID: ID!
  createdAt: Time!
  user: User!
  post: Post!
}
"""
A connection to a list of items.
"""
type UserLikeConnection {
  """
  A list of edges.
  """
  edges: [UserLikeEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserLikeEdge {
  """
  The item at the end of the edge.
  """
  node: UserLike
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for UserLike connections
"""
input UserLikeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order UserLikes.
  """
  field: UserLikeOrderField!
}
"""
Properties by which UserLike connections can be ordered.
"""
enum UserLikeOrderField {
  ID
  CREATED_AT
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  ID
  USERNAME
  EMAIL
  CREATED_AT
  UPDATED_AT
  IS_ACTIVE
}
type UserPost implements Node {
  id: ID!
  userID: ID!
  postID: ID!
  createdAt: Time!
  role: String!
  user: User!
  post: Post!
}
"""
Ordering options for UserPost connections
"""
input UserPostOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order UserPosts.
  """
  field: UserPostOrderField!
}
"""
Properties by which UserPost connections can be ordered.
"""
enum UserPostOrderField {
  CREATED_AT
  ROLE
}
