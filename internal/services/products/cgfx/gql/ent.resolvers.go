package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"products/cgfx/ent/gen"

	"entgo.io/contrib/entgql"
	"github.com/google/uuid"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id uuid.UUID) (gen.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []uuid.UUID) ([]gen.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context, after *entgql.Cursor[uuid.UUID], first *int, before *entgql.Cursor[uuid.UUID], last *int, orderBy []*gen.OrderOrder, where *gen.OrderWhereInput) (*gen.OrderConnection, error) {
	return r.client.Order.Query().
		Paginate(ctx, after, first, before, last,
			gen.WithOrderOrder(orderBy),
			gen.WithOrderFilter(where.Filter),
		)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[uuid.UUID], first *int, before *entgql.Cursor[uuid.UUID], last *int, orderBy []*gen.UserOrder, where *gen.UserWhereInput) (*gen.UserConnection, error) {
	return r.client.User.Query().
		Paginate(ctx, after, first, before, last,
			gen.WithUserOrder(orderBy),
			gen.WithUserFilter(where.Filter),
		)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
